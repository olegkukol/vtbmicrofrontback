generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Type {
  INTERNAL
  OUTSTAFF
}

enum Role {
  HEAD_OF_DEPARTMENT
  HEAD_OF_STREAM
  HEAD_OF_TEAM
  EMPLOYEE
}

model StagingOfApproving {
  id                           String               @id @default(uuid())
  vacantionAppliationId        String               @unique
  teamItLeaderFio              String
  streamItLeaderFio            String
  headOfDepartmentFio          String
  isTeamLeaderApproved         Boolean              @default(false)
  isStreamItLeaderApproved     Boolean              @default(false)
  isHeaderOfDepartmentApproved Boolean              @default(false)
  VacantionApplication         VacantionApplication @relation(fields: [vacantionAppliationId], references: [id])
}

model Skill {
  id         String    @id @default(uuid())
  name       String
  level      Int
  Employee   Employee? @relation(fields: [employeeId], references: [id])
  employeeId String
}

model VacantionPlan {
  id         String     @id @default(uuid())
  startDate  DateTime   @default(now())
  endDate    DateTime   @default(now())
  employeeId String     @unique
  Employee   Employee[]
}

model VacantionApplication {
  id                         String              @id @default(uuid())
  employee                   Employee?           @relation("employee", fields: [employeeId], references: [id])
  employeeId                 String              @unique
  startDate                  DateTime            @default(now())
  endDate                    DateTime            @default(now())
  substituteEmployee         Employee?           @relation("substituteEmployee", fields: [substituteEmployeeId], references: [id])
  substituteEmployeeId       String?
  team                       Team                @relation(fields: [teamId], references: [id])
  teamId                     String
  stream                     Stream              @relation(fields: [streamId], references: [id])
  streamId                   String
  approvalTeamItLeaderId     String
  approvalStreamItLeaderId   String
  approvalHeadOfDepartmentId String
  Employee                   Employee[]          @relation("headOfDepartment")
  stages                     StagingOfApproving?
}

model Employee {
  id                     String                @id @default(uuid())
  username               String                @unique
  password               String
  fio                    String?
  position               String?
  role                   Role?                 @default(EMPLOYEE)
  type                   Type?                 @default(INTERNAL)
  skills                 Skill[]
  vacantionPlan          VacantionPlan?        @relation(fields: [vacantionPlanId], references: [id])
  vacantionPlanId        String?
  Employee               VacantionApplication? @relation("employee")
  SubstituteEmployee     VacantionApplication? @relation("substituteEmployee")
  HeadOfDepartment       VacantionApplication? @relation("headOfDepartment", fields: [vacantionApplicationId], references: [id])
  Stream                 Stream?               @relation(fields: [streamId], references: [id])
  streamId               String?
  Team                   Team?                 @relation(fields: [teamId], references: [id])
  teamId                 String?
  vacantionApplicationId String?
}

model Team {
  id                   String                 @id @default(uuid())
  name                 String
  streamId             String
  stream               Stream                 @relation(fields: [streamId], references: [id])
  teamItLeaderId       String?
  VacantionApplication VacantionApplication[]
  emploees             Employee[]
}

model Stream {
  id                   String                 @id @default(uuid())
  name                 String
  headOfDepartmentId   String?
  streamItLeaderId     String?
  teams                Team[]
  Employee             Employee[]
  VacantionApplication VacantionApplication[]
}
