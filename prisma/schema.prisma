generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Type {
  INTERNAL
  OUTSTAFF
}

enum Role {
  HEAD_OF_DEPARTMENT
  HEAD_OF_STREAM
  HEAD_OF_TEAM
  EMPLOYEE
}

enum VacantionApplicationStatus {
  ACTIVE
  APPROVED
}

model StageOfApproving {
  id                    String               @id @default(uuid())
  approved              Boolean              @default(false)
  order                 Int                  @default(0)
  vacantionAppliationId String
  approverId            String
  Approver              Employee?            @relation(fields: [approverId], references: [id])
  VacantionApplication  VacantionApplication @relation(fields: [vacantionAppliationId], references: [id])
}

model Skill {
  id         String    @id @default(uuid())
  name       String
  level      Int
  Employee   Employee? @relation(fields: [employeeId], references: [id])
  employeeId String
}

model VacantionPlan {
  id         String     @id @default(uuid())
  startDate  DateTime   @default(now())
  endDate    DateTime   @default(now())
  employeeId String     @unique
  Employee   Employee[]
}

model VacantionApplication {
  id                   String                      @id @default(uuid())
  employee             Employee?                   @relation("employee", fields: [employeeId], references: [id])
  employeeId           String
  status               VacantionApplicationStatus? @default(ACTIVE)
  startDate            DateTime                    @default(now())
  endDate              DateTime                    @default(now())
  substituteEmployee   Employee?                   @relation("substituteEmployee", fields: [substituteEmployeeId], references: [id])
  substituteEmployeeId String?
  team                 Team                        @relation(fields: [teamId], references: [id])
  teamId               String
  stream               Stream                      @relation(fields: [streamId], references: [id])
  streamId             String
  currentApproverId    String?
  currentApprover      Employee?                   @relation("currentApprover", fields: [currentApproverId], references: [id])
  stages               StageOfApproving[]
}

model Employee {
  id                     String                 @id @default(uuid())
  username               String                 @unique
  password               String
  fio                    String?
  position               String?
  role                   Role?                  @default(EMPLOYEE)
  type                   Type?                  @default(INTERNAL)
  skills                 Skill[]
  vacantionPlan          VacantionPlan[]        @relation(references: [id])
  SubstituteEmployee     VacantionApplication?  @relation("substituteEmployee")
  Stream                 Stream?                @relation(fields: [streamId], references: [id])
  streamId               String?
  Team                   Team?                  @relation(fields: [teamId], references: [id])
  teamId                 String?
  StageOfApproving       StageOfApproving[]
  VacantionApplication   VacantionApplication[] @relation("employee")
  CurrentApprover        VacantionApplication[] @relation("currentApprover")
  HeadOfDepartment       Stream?                @relation("headOfDepartment")
  StreamLeader           Stream?                @relation("streamLeader")
  TeamLeader             Team?                  @relation("teamLeader")
  vacantionApplicationId String?
}

model Team {
  id                   String                 @id @default(uuid())
  name                 String
  streamId             String
  stream               Stream                 @relation(fields: [streamId], references: [id])
  teamLeaderId         String?
  teamLeader           Employee?              @relation("teamLeader", fields: [teamLeaderId], references: [id])
  VacantionApplication VacantionApplication[]
  emploees             Employee[]
}

model Stream {
  id                   String                 @id @default(uuid())
  name                 String
  headOfDepartment     Employee?              @relation("headOfDepartment", fields: [headOfDepartmentId], references: [id])
  headOfDepartmentId   String?
  streamLeaderId       String?
  streamLeader         Employee?              @relation("streamLeader", fields: [streamLeaderId], references: [id])
  teams                Team[]
  Employee             Employee[]
  VacantionApplication VacantionApplication[]
}
